name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Docker
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Docker Hub
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Step 4: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/nodejs-app:latest .

    # Step 5: Push Docker image to Docker Hub
    - name: Push Docker image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/nodejs-app:latest

    # Step 6: Deploy to AWS EC2
    - name: Deploy container on AWS EC2
      env:
        DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/nodejs-app:latest
        DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
      run: |
        # Save SSH key
        echo "${{ secrets.AWS_SSH_KEY }}" > ssh_key.pem
        chmod 600 ssh_key.pem

        # SSH into the EC2 instance and deploy the container
        ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@${{ secrets.AWS_HOST }} << EOF
          # Pull the latest image
          docker pull $DOCKER_IMAGE
          
          # Stop any running container on the same port
          RUNNING_CONTAINER=$(docker ps --filter "publish=${DEPLOY_PORT}" -q)
          if [ ! -z "$RUNNING_CONTAINER" ]; then
            docker stop $RUNNING_CONTAINER
            docker rm $RUNNING_CONTAINER
          fi

          # Run the container
          docker run -d -p $DEPLOY_PORT:3000 --name nodejs-app $DOCKER_IMAGE
EOF

        # Clean up SSH key
        rm -f ssh_key.pem
